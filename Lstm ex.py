import numpy
from tensorflow.keras.datasets import imdb
from tensorflow.keras.models import Sequential
from tensorflow.Keras.layers import Dense,LSTM,Dropout
from tensorflow.keras.layers.embeddings import Embedding
from tensorflow.keras.preprocessing import sequence
numpy.random.seed(100)
(xtrg,ytrg),(xtest,ytest) = imdb.load_data(num_words=50000)
print("Shape of training",xtrg.shape,"test dataset:",xtest.shape)
xtrg=sequence.pad_sequences(xtrg,maxlen=200)
xtest=sequence.pad_sequences(xtest,maxlen=200)
model1=Sequential()
model1.add(Embedding(1000,32,input_length=200))
model1.add(LSTM(100))
model1.add(Dense(1,activation='relu'))
model1.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
print(model1.summary())
model1.add(xtrg,ytrg,validation_data=(xtest,ytest),epochs=3,batch_size=1000)
scores=model1.evaluate(xtest,ytest,verbose=0)
print("Accuracy: %.2f%%" %(scores[1]*100))
#-------------------Changing Activation Function---------------------------------------
model2=Sequential()
model2.add(Embedding(1000,32,input_length=200))
model2.add(LSTM(100))
model2.add(Dense(1,activation='sigmoid'))
model2.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
print(model2.summary())
model2.fit(xtrg,ytrg,validation_data=(xtest,ytest),epochs=3,batch_size=1000)
scores=model2.evaluate(xtest,ytest,verbose=0)
print("Accuracy: %.2f%%" %(scores[1]*100))
#----------------------------Adding Dropout---------------------------------
model3=Sequential()
model3.add(Embedding(1000,32,input_length=200))
model3.add(Dropout(0.2))
model3.add(LSTM(100))
model3.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
print(model3.summary())
model3.fit(xtrg,ytrg,validation_data=(xtest,ytest),epochs=3,batch_size=1000)
scores=model3.evaluate(xtest,ytest)
print('Test accuracy of the model is: %.2f%%'%(100*score[1]))
score=model3.evaluate(xtrg,ytrg)
print('Test accuracy of the model is: %.2f%%'%(100*score[1]))
#-----------------------Adding recurrent dropout----------------------------------------------------
model4=Sequential()
model4.add(Embedding(1000,32,input_length=200))
model4.add(LSTM(100,dropout=0.2,recurrent_dropout=0.1))
model4.add(Dense(500,activation='sigmoid'))
model4.add(Dense(100,activation='sigmoid'))
model4.add(Dense(1,activation='sigmoid'))
model4.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
print(model4.summary())
model4.fit(xtrg,ytrg,validation_data=(xtest,ytest),epochs=3,batch_size=1000)
score=model4.evaluate(xtest,ytest)
print('Test accuracy of the model is: %.2f%%'%(100*score[1]))
score=model4.evaluate(xtrg,ytrg)
print('Train accuracy of the model is: %.2f%%'%(100*score[1]))